import * as path from 'node:path';
import * as process from 'node:process';
import { FileRouteResolver } from "./components/file-route-resolver.mjs";
import { isFunction, isRecordWith } from "./utils/object.utils.mjs";
import { resolveNotFoundHandler } from "./components/not-found-resolver.mjs";
import { httpAdapter } from "./adapters/http-adapter.mjs";
import { validateBaseDirExistence } from "./validations/validations.mjs";
import { executeWithMiddlewares } from "./components/middleware-executer.mjs";
export async function initFileRouter({
  baseDir = 'api',
  ignoreFilesRegex,
  clearImportCache = false,
  adapter = httpAdapter
} = {}) {
  const {
    getPathname,
    defaultNotFoundHandler,
    getMethod
  } = adapter;
  const normalizedBaseDir = path.isAbsolute(baseDir) ? baseDir : path.join(process.cwd(), baseDir);
  await validateBaseDirExistence(normalizedBaseDir);
  const fileRouteResolver = new FileRouteResolver({
    baseDir: normalizedBaseDir,
    ignoreFilesRegex,
    clearImportCache
  });
  const [middlewares, routeHandlers] = await fileRouteResolver.getHandlers();
  const notFoundHandler = (await resolveNotFoundHandler(normalizedBaseDir)) || defaultNotFoundHandler;
  function extractMiddlewares(pathname) {
    return middlewares.filter(({
      regexp
    }) => regexp.test(`${pathname}/`)).flatMap(({
      handler
    }) => Array.isArray(handler) ? handler : [handler]);
  }
  function runHandler(pathname, method, args) {
    const matchedRoute = routeHandlers.find(({
      regex,
      method: routeMethod
    }) => regex.test(pathname) && (!routeMethod || method === routeMethod));
    if (!matchedRoute) {
      return notFoundHandler(...args);
    }
    const {
      handler
    } = matchedRoute;
    const routeParams = matchedRoute.getRouteParams(pathname);
    if (isRecordWith(handler) && method && handler[method]) {
      return handler[method](...args, routeParams);
    }
    if (isFunction(handler)) {
      return handler(...args, routeParams);
    }
    if (Array.isArray(handler)) {
      const [routeMiddlewares, routeHandler] = [handler.slice(0, -1), handler.at(-1)];
      return executeWithMiddlewares(routeMiddlewares, routeHandler, args, routeParams);
    }
    return notFoundHandler(...args, routeParams);
  }
  return function requestHandler(...args) {
    const pathname = getPathname(...args);
    const method = getMethod ? getMethod(...args) : undefined;
    const matchedMiddlewares = extractMiddlewares(pathname);
    return executeWithMiddlewares(matchedMiddlewares, () => runHandler(pathname, method, args), args);
  };
}
//# sourceMappingURL=file-router.mjs.map