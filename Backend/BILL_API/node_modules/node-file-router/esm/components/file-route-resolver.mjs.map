{"version":3,"file":"file-route-resolver.mjs","names":["fs","path","exactSlugSegment","catchAllSegment","optionalCatchAllSegment","RouteHandler","MiddlewareHandler","isCommonJs","validateFileFormat","FileRouteResolver","fileExtensions","join","fileExtensionPattern","RegExp","middlewareFilePattern","indexFilePattern","clearImportCache","constructor","data","baseDir","ignoreFilesRegex","console","warn","getHandlers","directory","middlewares","routes","scanDirectory","sort","left","right","nestingLevel","compareByNestingLevelAndType","parentRoute","entries","readdir","withFileTypes","routeHandlers","middlewareHandlers","entry","processEntry","push","fullPath","name","routePath","isDirectory","childMiddlewareHandlers","childHandlers","isFile","isValidFile","test","middlewareHandler","processMiddlewareEntry","routeHandler","processFileEntry","some","pattern","isDynamic","dynamicRoute","isMatch","fileName","filePath","require","cache","handler","then","module","default","replace","initialRoute","method","pureRouteName","extractMethodFromRoute","route","paramExtractors","parseDynamicParams","isIndex","routeKey","regex","filter","reduce","acc","parsedRoute","parse","match","undefined","pureRoute"],"sources":["../../../src/components/file-route-resolver.ts"],"sourcesContent":["import fs from 'node:fs/promises';\nimport path from 'node:path';\n\nimport { exactSlugSegment } from './dynamic-routes/exact-slug-segment';\nimport { catchAllSegment } from './dynamic-routes/catch-all-segment';\nimport { optionalCatchAllSegment } from './dynamic-routes/optional-catch-all-segment';\nimport { RouteHandler } from './route-handler/route-handler';\nimport { MiddlewareHandler } from './route-handler/middleware-handler';\nimport { isCommonJs } from '../utils/env.utils';\nimport { validateFileFormat } from '../validations/validations';\n\nimport type { ParamExtractor } from './dynamic-routes/common/route-params-parser';\nimport type { Dirent } from 'node:fs';\n\ninterface Props {\n  baseDir: string;\n  ignoreFilesRegex?: RegExp[];\n  clearImportCache: boolean;\n}\n\ninterface RouteWithParams {\n  route: string;\n  paramExtractors: Record<string, ParamExtractor>;\n}\n\nexport class FileRouteResolver {\n  private static readonly fileExtensions = ['js', 'mjs', 'cjs', 'ts'].join('|');\n  private static readonly fileExtensionPattern = new RegExp(\n    `\\\\.(${FileRouteResolver.fileExtensions})$`\n  );\n  private static readonly middlewareFilePattern = new RegExp(\n    `middleware\\\\.(${FileRouteResolver.fileExtensions})$`\n  );\n  // Matches: index.js and index.[get].js\n  private static readonly indexFilePattern = new RegExp(\n    `index(\\\\.\\\\[[^\\\\]]+\\\\])?\\\\.(${FileRouteResolver.fileExtensions})$`\n  );\n\n  private readonly baseDir: string;\n  private readonly ignoreFilesRegex: RegExp[];\n  private readonly clearImportCache: boolean = false;\n\n  constructor(data: Props) {\n    this.baseDir = data.baseDir;\n    this.ignoreFilesRegex = data.ignoreFilesRegex || [];\n\n    if (data.clearImportCache && !isCommonJs()) {\n      console.warn('Cache clearing is only supported for CommonJS modules');\n    } else {\n      this.clearImportCache = data.clearImportCache;\n    }\n  }\n\n  async getHandlers(\n    directory = this.baseDir\n  ): Promise<[MiddlewareHandler[], RouteHandler[]]> {\n    const [middlewares, routes] = await this.scanDirectory(directory);\n\n    return [\n      middlewares.sort((left, right) => left.nestingLevel - right.nestingLevel),\n      routes.sort(this.compareByNestingLevelAndType)\n    ];\n  }\n\n  private async scanDirectory(\n    directory = this.baseDir,\n    parentRoute = '',\n    nestingLevel = 0\n  ): Promise<[MiddlewareHandler[], RouteHandler[]]> {\n    const entries = await fs.readdir(directory, { withFileTypes: true });\n    const routeHandlers: RouteHandler[] = [];\n    const middlewareHandlers: MiddlewareHandler[] = [];\n\n    for (const entry of entries) {\n      const [middlewares, routes] = await this.processEntry(\n        directory,\n        parentRoute,\n        nestingLevel,\n        entry\n      );\n\n      routeHandlers.push(...routes);\n      middlewareHandlers.push(...middlewares);\n    }\n\n    return [middlewareHandlers, routeHandlers];\n  }\n\n  private async processEntry(\n    directory: string,\n    parentRoute: string,\n    nestingLevel: number,\n    entry: Dirent\n  ) {\n    const routeHandlers: RouteHandler[] = [];\n    const middlewareHandlers: MiddlewareHandler[] = [];\n\n    const fullPath = path.join(directory, entry.name);\n    const routePath = `${parentRoute}/${entry.name}`;\n\n    if (entry.isDirectory()) {\n      const [childMiddlewareHandlers, childHandlers] = await this.scanDirectory(\n        fullPath,\n        routePath,\n        nestingLevel + 1\n      );\n      routeHandlers.push(...childHandlers);\n      middlewareHandlers.push(...childMiddlewareHandlers);\n    } else if (entry.isFile() && this.isValidFile(entry.name)) {\n      if (FileRouteResolver.middlewareFilePattern.test(entry.name)) {\n        const middlewareHandler = await this.processMiddlewareEntry(\n          fullPath,\n          routePath,\n          nestingLevel\n        );\n\n        middlewareHandlers.push(middlewareHandler);\n      } else {\n        const routeHandler = await this.processFileEntry(\n          fullPath,\n          entry,\n          routePath,\n          nestingLevel\n        );\n\n        routeHandlers.push(routeHandler);\n      }\n    }\n\n    return [middlewareHandlers, routeHandlers] as const;\n  }\n\n  private isValidFile(name: string): boolean {\n    if (this.ignoreFilesRegex.some((pattern) => pattern.test(name))) {\n      return false;\n    }\n\n    return FileRouteResolver.fileExtensionPattern.test(name);\n  }\n\n  private compareByNestingLevelAndType(\n    left: RouteHandler,\n    right: RouteHandler\n  ): number {\n    if (left.nestingLevel !== right.nestingLevel) {\n      return right.nestingLevel - left.nestingLevel;\n    }\n\n    const isDynamic = [\n      optionalCatchAllSegment,\n      catchAllSegment,\n      exactSlugSegment\n    ].some((dynamicRoute) => dynamicRoute.isMatch(left.fileName));\n\n    return isDynamic ? 1 : -1;\n  }\n\n  private async processMiddlewareEntry(\n    fullPath: string,\n    filePath: string,\n    nestingLevel: number\n  ) {\n    if (this.clearImportCache) {\n      delete require.cache[fullPath];\n    }\n\n    const handler = await import(fullPath)\n      .then((module) => validateFileFormat(fullPath, module))\n      .then((module) => module.default);\n\n    const routePath = filePath.replace(\n      FileRouteResolver.middlewareFilePattern,\n      ''\n    );\n\n    return new MiddlewareHandler({\n      path: routePath,\n      handler,\n      nestingLevel\n    });\n  }\n\n  private async processFileEntry(\n    fullPath: string,\n    entry: Dirent,\n    routePath: string,\n    nestingLevel: number\n  ): Promise<RouteHandler> {\n    if (this.clearImportCache) {\n      delete require.cache[fullPath];\n    }\n\n    const handler = await import(fullPath)\n      .then((module) => validateFileFormat(fullPath, module))\n      .then((module) => module.default);\n\n    const initialRoute = routePath.replace(\n      FileRouteResolver.fileExtensionPattern,\n      ''\n    );\n\n    const [method, pureRouteName] = this.extractMethodFromRoute(initialRoute);\n    const { route, paramExtractors } = this.parseDynamicParams(pureRouteName);\n\n    const isIndex = FileRouteResolver.indexFilePattern.test(entry.name);\n    const routeKey = isIndex ? route.replace(/\\/index$/, '') : route;\n\n    const regex = new RegExp(`^${routeKey}/?$`);\n\n    return new RouteHandler({\n      method,\n      fileName: entry.name,\n      handler,\n      regex,\n      nestingLevel,\n      paramExtractors\n    });\n  }\n\n  private parseDynamicParams(initialRoute: string): RouteWithParams {\n    return [exactSlugSegment, catchAllSegment, optionalCatchAllSegment]\n      .filter((dynamicRoute) => dynamicRoute.isMatch(initialRoute))\n      .reduce(\n        (acc, route) => {\n          const parsedRoute = route.parse(acc.route);\n          return {\n            route: parsedRoute.route,\n            paramExtractors: {\n              ...acc.paramExtractors,\n              ...parsedRoute.paramExtractors\n            }\n          };\n        },\n        { route: initialRoute, paramExtractors: {} }\n      );\n  }\n\n  private extractMethodFromRoute(route: string): [string | undefined, string] {\n    const pattern = /\\.\\[([^\\]]+)\\](\\..+)?$/;\n\n    const match = route.match(pattern);\n    if (!match) {\n      return [undefined, route];\n    }\n\n    const [, method] = match;\n    const pureRoute = route.replace(pattern, '');\n\n    return [method, pureRoute];\n  }\n}\n"],"mappings":"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"}