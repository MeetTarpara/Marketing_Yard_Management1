{"version":3,"file":"middleware-executer.mjs","names":["executeWithMiddlewares","middlewares","fileRouteHandler","args","routeParams","handlersQueue","results","processNext","i","isMiddlewareHandler","length","isRouteHandler","pop"],"sources":["../../../src/components/middleware-executer.ts"],"sourcesContent":["import type { RequestHandler } from '../types/request-handlers';\nimport type { Dictionary } from '../types/dictionary';\n\nexport async function executeWithMiddlewares<R>(\n  middlewares: RequestHandler[],\n  fileRouteHandler: RequestHandler,\n  args: unknown[],\n  routeParams?: Dictionary<string>\n) {\n  const handlersQueue = [...middlewares, fileRouteHandler];\n\n  const results: (R | undefined | void)[] = [];\n  async function processNext(i = 0): Promise<void> {\n    const isMiddlewareHandler = i < handlersQueue.length - 1;\n    const isRouteHandler = i === handlersQueue.length - 1;\n\n    if (isMiddlewareHandler) {\n      results[i] = await handlersQueue[i](\n        ...args,\n        () => processNext(i + 1),\n        routeParams\n      );\n    } else if (isRouteHandler) {\n      results[i] = await handlersQueue[i](...args, routeParams);\n    }\n  }\n\n  await processNext();\n\n  // Returns the result of the last successful handler in the chain,\n  // not from the first in the call stack.\n  return results.pop();\n}\n"],"mappings":"AAGA,OAAO,eAAeA,sBAAsBA,CAC1CC,WAA6B,EAC7BC,gBAAgC,EAChCC,IAAe,EACfC,WAAgC,EAChC;EACA,MAAMC,aAAa,GAAG,CAAC,GAAGJ,WAAW,EAAEC,gBAAgB,CAAC;EAExD,MAAMI,OAAiC,GAAG,EAAE;EAC5C,eAAeC,WAAWA,CAACC,CAAC,GAAG,CAAC,EAAiB;IAC/C,MAAMC,mBAAmB,GAAGD,CAAC,GAAGH,aAAa,CAACK,MAAM,GAAG,CAAC;IACxD,MAAMC,cAAc,GAAGH,CAAC,KAAKH,aAAa,CAACK,MAAM,GAAG,CAAC;IAErD,IAAID,mBAAmB,EAAE;MACvBH,OAAO,CAACE,CAAC,CAAC,GAAG,MAAMH,aAAa,CAACG,CAAC,CAAC,CACjC,GAAGL,IAAI,EACP,MAAMI,WAAW,CAACC,CAAC,GAAG,CAAC,CAAC,EACxBJ,WACF,CAAC;IACH,CAAC,MAAM,IAAIO,cAAc,EAAE;MACzBL,OAAO,CAACE,CAAC,CAAC,GAAG,MAAMH,aAAa,CAACG,CAAC,CAAC,CAAC,GAAGL,IAAI,EAAEC,WAAW,CAAC;IAC3D;EACF;EAEA,MAAMG,WAAW,CAAC,CAAC;;EAEnB;EACA;EACA,OAAOD,OAAO,CAACM,GAAG,CAAC,CAAC;AACtB"}