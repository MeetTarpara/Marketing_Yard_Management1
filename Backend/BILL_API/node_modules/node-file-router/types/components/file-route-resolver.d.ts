import { RouteHandler } from './route-handler/route-handler';
import { MiddlewareHandler } from './route-handler/middleware-handler';
interface Props {
    baseDir: string;
    ignoreFilesRegex?: RegExp[];
    clearImportCache: boolean;
}
export declare class FileRouteResolver {
    private static readonly fileExtensions;
    private static readonly fileExtensionPattern;
    private static readonly middlewareFilePattern;
    private static readonly indexFilePattern;
    private readonly baseDir;
    private readonly ignoreFilesRegex;
    private readonly clearImportCache;
    constructor(data: Props);
    getHandlers(directory?: string): Promise<[MiddlewareHandler[], RouteHandler[]]>;
    private scanDirectory;
    private processEntry;
    private isValidFile;
    private compareByNestingLevelAndType;
    private processMiddlewareEntry;
    private processFileEntry;
    private parseDynamicParams;
    private extractMethodFromRoute;
}
export {};
//# sourceMappingURL=file-route-resolver.d.ts.map